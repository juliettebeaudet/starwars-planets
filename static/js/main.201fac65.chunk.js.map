{"version":3,"sources":["components/Title.js","components/FilterName.js","actions/index.js","components/FilterNumber.js","components/ClearFilters.js","components/FilterList.js","components/TableHeader.js","components/TableData.js","components/Table.js","components/Footer.js","App.js","reducers/index.js","store/index.js","serviceWorker.js","index.js"],"names":["Title","className","React","Component","FilterName","this","props","fetching","getInput","fullList","data-testid","type","name","onChange","e","target","value","onClick","connect","state","planetReducer","dispatch","input","filterNameAction","empty","FilterNumber","column","comparison","hChange","bind","handleClick","event","setState","getNumberInput","columnFilters","filterNumber","map","filter","remainingColumns","includes","hidden","disabled","selected","c","key","placeholder","filters","filterByNumericValues","col","comp","v","ClearFilters","clearAll","FilterList","cancelFilter","i","index","TableHeader","TableData","data","filterName","allPlanets","forEach","planets","myFilter","planet","Number","toLowerCase","rotation_period","orbital_period","diameter","climate","gravity","terrain","surface_water","population","filterByName","Table","async","fetch","then","response","json","console","log","results","error","err","message","Footer","href","rel","App","initialState","initialStateInput","rootReducer","combineReducers","action","slice","length","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.201fac65.chunk.js","sourcesContent":["import React from 'react';\n\nclass Title extends React.Component {\n  render() {\n    return (\n      <div className=\"title\">\n        <h1> Star Wars </h1>\n        <h4> Planets Search Engine </h4>\n      </div>\n    );\n  }\n}\n\nexport default Title;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { filterNameAction, fullListAction } from '../actions';\n\nclass FilterName extends React.Component {\n\n  render() {\n    const { fetching, getInput, fullList } = this.props;\n    return (\n      <div>\n        {!fetching && (\n          <div>\n            <h4>Search for specific planet:</h4>\n            <input\n              data-testid=\"name-filter\"\n              type=\"text\"\n              name=\"\"\n              onChange={(e) => getInput(e.target.value)}\n            />\n          </div>\n        )}\n        <button onClick={() => fullList('')}>Back to full list</button>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  fetching: state.planetReducer.fetching,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getInput: (input) => dispatch(filterNameAction(input)),\n  fullList: (input) => dispatch(fullListAction(input)),\n});\n\nFilterName.propTypes = {\n  fetching: propTypes.bool.isRequired,\n  getInput: propTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterName);\n","export const REQUEST = 'REQUEST';\nexport const DATA = 'DATA';\nexport const FAIL = 'FAIL';\nexport const INPUT_NAME = 'INPUT_NAME';\nexport const SELECT_NUMBER = 'SELECT_NUMBER';\nexport const CANCEL_FILTER = 'CANCEL_FILTER';\nexport const CLEAR = 'CLEAR';\nexport const BACK_TO_FULL_LIST = 'BACK_TO_FULL_LIST';\n\nexport function requestAction() {\n  return {\n    type: REQUEST,\n  };\n}\n\nexport function successDataAction(data) {\n  return {\n    type: DATA,\n    data,\n  };\n}\n\nexport function failAction(err) {\n  return {\n    type: FAIL,\n    err,\n  };\n}\n\nconst apiPlanets = 'https://swapi-trybe.herokuapp.com/api/planets/';\n// [HA] - Modelo (Trybe Course, 'React with Redux Part 2', Doguinhos).\nexport function fetchPlanetsThunk() {\n  return (dispatch) => {\n    dispatch(requestAction());\n    return fetch(apiPlanets)\n      .then((response) => response.json())\n      .then(\n        (json) => {\n          console.log(json.results);\n          return dispatch(successDataAction(json.results));\n        },\n        (error) => dispatch(failAction(error.message)),\n      );\n  };\n}\n\nexport function filterNameAction(input) {\n  return {\n    type: INPUT_NAME,\n    input,\n  };\n}\n\nexport function filterNumberAction(col, comp, v) {\n  // console.log('received in action: ' + column, comparison, value);\n  return {\n    type: SELECT_NUMBER,\n    col,\n    comp,\n    v,\n  };\n}\n\nexport function cancelFilterAction(i) {\n  return {\n    type: CANCEL_FILTER,\n    i,\n  };\n}\n\nexport function clearAction() {\n  return {\n    type: CLEAR,\n  };\n}\n\nexport function fullListAction(empty) {\n  return {\n    type: BACK_TO_FULL_LIST,\n    empty\n  };\n}\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { filterNumberAction } from '../actions';\n\nclass FilterNumber extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      column: '',\n      comparison: '',\n      value: '',\n    };\n    this.hChange = this.hChange.bind(this);\n    this.handleClick = this.handleClick.bind(this);\n  }\n\n  hChange(event) {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  }\n\n  handleClick(event) {\n    const { getNumberInput } = this.props;\n    const { column, comparison, value } = this.state;\n    getNumberInput(column, comparison, value);\n  }\n  \n  render() {\n    const { hChange, handleClick } = this;\n    const { fetching, filterNumber } = this.props;\n    const columnOptions = ['', 'population', 'orbital_period', 'diameter', 'rotation_period', 'surface_water'];\n    const comparisonOptions = ['', 'more than', 'less than', 'equal to'];\n    const columnFilters = filterNumber.map((filter) => filter.column);\n    const remainingColumns = columnOptions.filter((column) => !columnFilters.includes(column));\n    return (\n      <div>\n        {!fetching && (\n          <div>\n            <h4>Apply more filters:</h4>\n            <select name=\"column\" data-testid=\"column-filter\" onChange={hChange}>\n              <option hidden disabled selected value>By Column</option>\n              {remainingColumns.map((c) => <option key={c} value={c}>{c}</option>)}\n            </select>\n            <select name=\"comparison\" data-testid=\"comparison-filter\" onChange={hChange}>\n              <option hidden disabled selected value>By Comparison</option>\n              {comparisonOptions.map((c) => <option key={c} value={c}>{c}</option>)}\n            </select>\n            <input data-testid=\"value-filter\" type=\"number\" name=\"value\" onChange={hChange} placeholder=\"Insert value\"/>\n            <button type=\"button\" data-testid=\"button-filter\" onClick={handleClick}>\n              Filter\n            </button>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  fetching: state.planetReducer.fetching,\n  filterNumber: state.filters.filterByNumericValues,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  getNumberInput: (column, comparison, value) =>\n    dispatch(filterNumberAction(column, comparison, value)),\n});\n\nFilterNumber.propTypes = {\n  fetching: propTypes.bool.isRequired,\n  getNumberInput: propTypes.func.isRequired,\n  filterNumber: propTypes.arrayOf(propTypes.object).isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterNumber);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { clearAction } from '../actions';\n\nclass ClearFilters extends React.Component {\n\n  render() {\n    const { clearAll } = this.props;\n    return (\n      <button className=\"button-clear\" onClick={() => clearAll()}>\n        Clear all filters\n      </button>\n    );\n  }\n}\n\nconst mapDispatchToProps = (dispatch) => ({\n  clearAll: (e) => dispatch(clearAction(e)),\n});\n\nClearFilters.propTypes = {\n  clearAll: propTypes.func.isRequired,\n};\n\nexport default connect(null, mapDispatchToProps)(ClearFilters);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { cancelFilterAction } from '../actions';\nimport ClearFilters from './ClearFilters';\n\nclass FilterList extends React.Component {\n\n  render() {\n    const { filterNumber, cancelFilter } = this.props;\n    return (\n      <div className=\"filters-list\">\n        <h4> Current filters: </h4>\n        {filterNumber.map((filter, i) => (\n          <p data-testid=\"filter\" className=\"p-filters\" key={filter.column}>\n            <span>\n              <button className=\"red-button\" onClick={() => cancelFilter(i)}>\n                X\n              </button>\n              {`${filter.column} ${filter.comparison} ${filter.value}`}\n            </span>\n          </p>\n        ))}\n        <ClearFilters />\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  filterNumber: state.filters.filterByNumericValues,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  cancelFilter: (index) => dispatch(cancelFilterAction(index)),\n});\n\nFilterList.propTypes = {\n  filterNumber: propTypes.arrayOf(propTypes.object).isRequired,\n  cancelFilter: propTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(FilterList);\n","import React from 'react';\n\nclass TableHeader extends React.Component {\n  render() {\n    return (\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Rotation period</th>\n          <th>Orbital period</th>\n          <th>Diameter</th>\n          <th>Climate</th>\n          <th>Gravity</th>\n          <th>Terrain</th>\n          <th>Surface water</th>\n          <th>Population</th>\n          {/* <th>Films</th>\n          <th>Url</th>\n          <th>Created</th>\n          <th>Edited</th> */}\n        </tr>\n      </thead>\n    );\n  }\n}\n\nexport default TableHeader;\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\n\nfunction filterByNumber(planets, myFilter) {\n  if (myFilter.comparison === 'more than') {\n    return planets.filter((planet) => Number(planet[myFilter.column]) > Number(myFilter.value));\n  } else if (myFilter.comparison === 'less than') {\n    return planets.filter((planet) => Number(planet[myFilter.column]) < Number(myFilter.value));\n  } else if (myFilter.comparison === 'equal to') {\n    return planets.filter((planet) => Number(planet[myFilter.column]) === Number(myFilter.value));\n  }\n  return planets;\n}\n\nclass TableData extends React.Component {\n\n  render() {\n    const { data, filterName, filterNumber } = this.props;\n    let allPlanets = data;\n    filterNumber.forEach((filter) => {\n      allPlanets = filterByNumber(allPlanets, filter);\n    });\n    return (\n      <tbody className=\"planets-table\">\n        {allPlanets\n          .filter((planet) => planet.name.toLowerCase().includes(filterName.name.toLowerCase()))\n          .map((planet) => (\n            <tr key={planet.name}>\n              <td key={planet.name}>{planet.name}</td>\n              <td key={planet.rotation_period}>{planet.rotation_period}</td>\n              <td key={planet.orbital_period}>{planet.orbital_period}</td>\n              <td key={planet.diameter}>{planet.diameter}</td>\n              <td key={planet.climate}>{planet.climate}</td>\n              <td key={planet.gravity}>{planet.gravity}</td>\n              <td key={planet.terrain}>{planet.terrain}</td>\n              <td key={planet.surface_water}>{planet.surface_water}</td>\n              <td key={planet.population}>{planet.population}</td>\n              {/* <td key={planet.films}>{planet.films}</td>\n              <td key={planet.url}>{planet.url}</td>\n              <td key={planet.created}>{planet.created}</td>\n              <td key={planet.edited}>{planet.edited}</td> */}\n            </tr>\n          ))}\n      </tbody>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  data: state.planetReducer.data,\n  filterName: state.filters.filterByName,\n  filterNumber: state.filters.filterByNumericValues,\n});\n\nTableData.propTypes = {\n  data: propTypes.arrayOf(propTypes.object).isRequired,\n  filterName: propTypes.shape({\n    filterByName: propTypes.object,\n  }).isRequired,\n  filterNumber: propTypes.arrayOf(propTypes.object).isRequired,\n};\n\nexport default connect(mapStateToProps, null)(TableData);\n","import React from 'react';\nimport propTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchPlanetsThunk } from '../actions';\nimport TableHeader from '../components/TableHeader';\nimport TableData from '../components/TableData';\n\nclass Table extends React.Component {\n\n  componentDidMount() {\n    const { async } = this.props;\n    async();\n  }\n\n  render() {\n    const { fetching } = this.props;\n    return (\n      <div>\n        {fetching && <h5>Loading...</h5>}\n        {!fetching && (\n          <div>\n            <table>\n              <TableHeader />\n              <TableData />\n            </table>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  fetching: state.planetReducer.fetching,\n  data: state.planetReducer.data,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  async: (data) => dispatch(fetchPlanetsThunk(data)),\n});\n\nTable.propTypes = {\n  fetching: propTypes.bool.isRequired,\n  async: propTypes.func.isRequired,\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Table);\n","import React from 'react';\n\nclass Footer extends React.Component {\n  render() {\n    return (\n      <div>\n        <p>©Copyright 2020</p>\n        <p>Project developed within <a href=\"https://www.betrybe.com/\" target=\"_blank\" rel=\"noopener noreferrer\">Trybe</a> School by student <a href=\"https://github.com/juliettebeaudet\" target=\"_blank\" rel=\"noopener noreferrer\">Juliette Beaudet</a> .</p>\n      </div>\n    );\n  }\n}\n\nexport default Footer;\n","import React from 'react';\nimport './App.css';\nimport Title from './components/Title';\nimport FilterName from './components/FilterName';\nimport FilterNumber from './components/FilterNumber';\nimport FilterList from './components/FilterList';\nimport Table from './components/Table';\nimport Footer from './components/Footer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <Title />\n      </header>\n      <section className=\"App-filters\">\n        <FilterName />\n        <FilterNumber />\n        <FilterList />\n      </section>\n      <section className=\"App-section\">\n        <Table />\n      </section>\n      <section className=\"planet-image\" />\n      <footer className=\"App-footer\">\n        <Footer />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\nimport { REQUEST, DATA, FAIL, INPUT_NAME, SELECT_NUMBER, CANCEL_FILTER, CLEAR, BACK_TO_FULL_LIST } from '../actions';\n\nconst initialState = {\n  fetching: false,\n  data: [],\n  error: '',\n};\n\nfunction planetReducer(state = initialState, action) {\n  switch (action.type) {\n    case REQUEST:\n      return { ...state, fetching: true };\n    case DATA:\n      return { ...state, fetching: false, data: action.data };\n    case FAIL:\n      return { ...state, fetching: false, error: action.err };\n    default:\n      return state;\n  }\n}\n\nconst initialStateInput = {\n  filterByName: {\n    name: '',\n  },\n  filterByNumericValues: [\n    // {\n    //   column: '',\n    //   comparison: '',\n    //   value: '',\n    // },\n  ],\n};\n\nfunction filters(state = initialStateInput, action) {\n  switch (action.type) {\n    case INPUT_NAME:\n      return {\n        ...state,\n        filterByName: { ...state.filterByName, name: action.input },\n      };\n    case SELECT_NUMBER:\n      return {\n        ...state,\n        filterByNumericValues: [\n          ...state.filterByNumericValues,\n          { column: action.col, comparison: action.comp, value: action.v },\n        ],\n      };\n    case CANCEL_FILTER:\n      return {\n        ...state,\n        filterByNumericValues: [\n          ...state.filterByNumericValues.slice(0, action.i),\n          ...state.filterByNumericValues.slice(action.i + 1, state.filterByNumericValues.length),\n        ],\n      };\n    case CLEAR:\n      return {\n        ...state,\n        filterByNumericValues: [\n          ...state.filterByNumericValues.slice(0,0),\n        ]\n      }\n    case BACK_TO_FULL_LIST:\n      return {\n        ...state,\n        filterByName: { ...state.filterByName, name: action.empty },\n      };\n    default:\n      return state;\n  }\n}\n\nconst rootReducer = combineReducers({ planetReducer, filters });\n\nexport default rootReducer;\n","import { createStore, compose, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\n\nconst store = createStore(rootReducer, composeEnhancers(applyMiddleware(thunk)));\n\nexport default store;\n\n// [HA] compose in https://github.com/zalmoxisus/redux-devtools-extension\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { Provider } from 'react-redux';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport store from './store';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}